name: CI/CD ECS Pipeline

on:
  workflow_dispatch:
    inputs:
      increment_major:
        description: "Major"
        required: false
        default: "false" 
        type: boolean
      increment_minor:
        description: "Minor"
        required: false
        default: "false"
        type: boolean
      increment_patch:
        description: "Patch"
        required: false
        default: "true"  # Default to true to ensure there's always a version increment
        type: boolean


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Log in to Amazon ECR
      run: |
       aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 975050059495.dkr.ecr.us-east-1.amazonaws.com

    - name: Get ECR Image Tags
      id: get_tags
      run: |
        # Get the latest tags for client and server images
        CLIENT_IMAGE_TAGS=$(aws ecr describe-images --repository-name mihirv21/client --query 'imageDetails[*].imageTags' --output json)
        SERVER_IMAGE_TAGS=$(aws ecr describe-images --repository-name mihirv21/server --query 'imageDetails[*].imageTags' --output json)
        
        # Extract valid semantic version tags
        CLIENT_TAGS=$(echo $CLIENT_IMAGE_TAGS | jq -r '.[][]' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
        SERVER_TAGS=$(echo $SERVER_IMAGE_TAGS | jq -r '.[][]' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
        
        if [ -z "$CLIENT_TAGS" ]; then
          echo "No valid semantic version tags found for client."
          echo "LATEST_CLIENT_VERSION=v0.0.0" >> $GITHUB_ENV
        else
          LATEST_CLIENT_VERSION=$(echo "$CLIENT_TAGS" | tail -n 1)
          echo "LATEST_CLIENT_VERSION=$LATEST_CLIENT_VERSION" >> $GITHUB_ENV
          echo "Latest client version found: $LATEST_CLIENT_VERSION"
        fi

        if [ -z "$SERVER_TAGS" ]; then
          echo "No valid semantic version tags found for server."
          echo "LATEST_SERVER_VERSION=v0.0.0" >> $GITHUB_ENV
        else
          LATEST_SERVER_VERSION=$(echo "$SERVER_TAGS" | tail -n 1)
          echo "LATEST_SERVER_VERSION=$LATEST_SERVER_VERSION" >> $GITHUB_ENV
          echo "Latest server version found: $LATEST_SERVER_VERSION"
        fi

    - name: Increment Versions
      id: increment_versions
      run: |
        # Increment both client and server versions based on inputs
        increment_version() {
          local VERSION=$1
          local VERSION_TYPE=$2

          # Strip the "v" prefix and split into major, minor, patch
          VERSION_NUMBER=${VERSION#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"

          # Increment the appropriate version parts
          [ "${{ github.event.inputs.increment_major }}" = "true" ] && MAJOR=$((MAJOR + 1))
          [ "${{ github.event.inputs.increment_minor }}" = "true" ] && MINOR=$((MINOR + 1))
          [ "${{ github.event.inputs.increment_patch }}" = "true" ] && PATCH=$((PATCH + 1))

          # Ensure proper version number format
          echo "v$MAJOR.$MINOR.$PATCH"
        }

        # Increment client version
        NEW_CLIENT_VERSION=$(increment_version "${{ env.LATEST_CLIENT_VERSION }}" "client")
        echo "NEW_CLIENT_VERSION=$NEW_CLIENT_VERSION" >> $GITHUB_ENV
        echo "New client version: $NEW_CLIENT_VERSION"

        # Increment server version
        NEW_SERVER_VERSION=$(increment_version "${{ env.LATEST_SERVER_VERSION }}" "server")
        echo "NEW_SERVER_VERSION=$NEW_SERVER_VERSION" >> $GITHUB_ENV
        echo "New server version: $NEW_SERVER_VERSION"

    - name: Build Docker images
      run: |
        docker compose build

    - name: Tag and push Docker images to ECR
      run: |
        # Tag and push client image
        docker tag client:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/client:${{ env.NEW_CLIENT_VERSION }}
        docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/client:${{ env.NEW_CLIENT_VERSION }}

        # Tag and push server image
        docker tag server:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/server:${{ env.NEW_SERVER_VERSION }}
        docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/server:${{ env.NEW_SERVER_VERSION }}

    - name: Download Current Task Definitions
      run: |
        aws ecs describe-task-definition --task-definition Front > front-task-definition.json
        aws ecs describe-task-definition --task-definition Node > node-task-definition.json

    - name: Update Task Definitions
      run: |
        FRONT_TASK_DEFINITION=$(cat front-task-definition.json)
        NODE_TASK_DEFINITION=$(cat node-task-definition.json)

        # Update Front task definition
        UPDATED_FRONT_TASK_DEFINITION=$(echo "$FRONT_TASK_DEFINITION" | jq --arg IMAGE "975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/client:${{ env.NEW_VERSION }}" '
          .taskDefinition.containerDefinitions[0].image = $IMAGE'
        )

        # Update Node task definition
        UPDATED_NODE_TASK_DEFINITION=$(echo "$NODE_TASK_DEFINITION" | jq --arg IMAGE "975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/server:${{ env.NEW_VERSION }}" '
          .taskDefinition.containerDefinitions[0].image = $IMAGE'
        )

        # Register updated task definitions
        echo "$UPDATED_FRONT_TASK_DEFINITION" > updated-front-task-definition.json
        echo "$UPDATED_NODE_TASK_DEFINITION" > updated-node-task-definition.json

        aws ecs register-task-definition --cli-input-json file://updated-front-task-definition.json
        aws ecs register-task-definition --cli-input-json file://updated-node-task-definition.json

    - name: Update ECS Services
      run: |
        # Update ECS services to use the new task definition
        aws ecs update-service --cluster Cluster --service Front --force-new-deployment --region us-east-1
        aws ecs update-service --cluster Cluster --service Node --force-new-deployment --region us-east-1

   
