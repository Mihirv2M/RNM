name: CI/CD ECS Pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Which part of the version to increment: major, minor, or patch"
        required: true
        default: "patch"
      deploy_client:
        description: "Deploy the client image?"
        required: true
        default: false
        type: boolean
      deploy_server:
        description: "Deploy the server image?"
        required: true
        default: false
        type: boolean

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Log in to Amazon ECR
      run: |
       aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 975050059495.dkr.ecr.us-east-1.amazonaws.com
       
    - name: Get ECR Client Image Tags
      id: get_client_tags
      run: |
        CLIENT_IMAGE_TAGS=$(aws ecr describe-images --repository-name mihirv21/client \
          --query 'imageDetails[*].imageTags' --output json)
        
        # Extract only valid semantic version tags (e.g., v1.0.0)
        CLIENT_TAGS=$(echo $CLIENT_IMAGE_TAGS | jq -r '.[][]' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
        
        if [ -z "$CLIENT_TAGS" ]; then
          echo "No valid semantic version tags found."
          echo "LATEST_CLIENT_VERSION=v0.0.0" >> $GITHUB_ENV
        else
          LATEST_CLIENT_VERSION=$(echo "$CLIENT_TAGS" | tail -n 1)
          echo "LATEST_CLIENT_VERSION=$LATEST_CLIENT_VERSION" >> $GITHUB_ENV
          echo "Latest client version found: $LATEST_CLIENT_VERSION"
        fi

    - name: Get ECR Server Image Tags
      id: get_server_tags
      run: |
        SERVER_IMAGE_TAGS=$(aws ecr describe-images --repository-name mihirv21/server \
          --query 'imageDetails[*].imageTags' --output json)
        
        # Extract only valid semantic version tags (e.g., v1.0.0)
        SERVER_TAGS=$(echo $SERVER_IMAGE_TAGS | jq -r '.[][]' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
        
        if [ -z "$SERVER_TAGS" ]; then
          echo "No valid semantic version tags found."
          echo "LATEST_SERVER_VERSION=v0.0.0" >> $GITHUB_ENV
        else
          LATEST_SERVER_VERSION=$(echo "$SERVER_TAGS" | tail -n 1)
          echo "LATEST_SERVER_VERSION=$LATEST_SERVER_VERSION" >> $GITHUB_ENV
          echo "Latest server version found: $LATEST_SERVER_VERSION"
        fi

    - name: Increment Client Version
      id: increment_client_version
      run: |
        LATEST_CLIENT_VERSION=${{ env.LATEST_CLIENT_VERSION }}
        VERSION_TYPE=${{ github.event.inputs.version_type }}

        # Strip the "v" prefix and split into major, minor, patch
        CLIENT_VERSION_NUMBER=${LATEST_CLIENT_VERSION#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CLIENT_VERSION_NUMBER"

        # Increment the appropriate version part
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
          *)
            echo "Invalid version_type: $VERSION_TYPE"
            exit 1
            ;;
        esac

        NEW_CLIENT_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_CLIENT_VERSION=$NEW_CLIENT_VERSION" >> $GITHUB_ENV
        echo "New client version: $NEW_CLIENT_VERSION"

    - name: Increment Server Version
      id: increment_server_version
      run: |
        LATEST_SERVER_VERSION=${{ env.LATEST_SERVER_VERSION }}
        VERSION_TYPE=${{ github.event.inputs.version_type }}

        # Strip the "v" prefix and split into major, minor, patch
        SERVER_VERSION_NUMBER=${LATEST_SERVER_VERSION#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$SERVER_VERSION_NUMBER"

        # Increment the appropriate version part
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
          *)
            echo "Invalid version_type: $VERSION_TYPE"
            exit 1
            ;;
        esac

        NEW_SERVER_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_SERVER_VERSION=$NEW_SERVER_VERSION" >> $GITHUB_ENV
        echo "New server version: $NEW_SERVER_VERSION"
 
    - name: Build Docker images
      run: |
        docker compose build

    - name: Tag and push Client Docker image to ECR
      if: ${{ github.event.inputs.deploy_client }}
      run: |
        # Tag and push client image
        docker tag client:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/client:${{ env.NEW_CLIENT_VERSION }}
        docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/client:${{ env.NEW_CLIENT_VERSION }}

    - name: Tag and push Server Docker image to ECR
      if: ${{ github.event.inputs.deploy_server }}
      run: |
        # Tag and push server image
        docker tag server:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/server:${{ env.NEW_SERVER_VERSION }}
        docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21/server:${{ env.NEW_SERVER_VERSION }}

      # docker tag client:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:client-${{ env.CLIENT_VERSION }}
      # docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:client-${{ env.CLIENT_VERSION }}

      # run: |
      
      #   docker tag client:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:1.${{ env.IMAGE_VERSION }}
      #   # docker tag server:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:${{ env.S_VERSION }}
      #   docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:1.${{ env.IMAGE_VERSION }}
      #   # docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:${{ env.S_VERSION }}

    # - name: Update ECS Client Service
    #   run: |
    #     aws ecs update-service \
    #       --cluster Cluster \
    #       --service Front \
    #       --force-new-deployment \
    #       --region us-east-1

    # - name: Update ECS Server Service
    #   run: |
    #     aws ecs update-service \
    #       --cluster Cluster \
    #       --service Node \
    #       --force-new-deployment \
    #       --region us-east-1
