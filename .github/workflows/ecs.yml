name: CI/CD ECS Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:name: CI/CD ecs Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Get current version tag for 1 image
      id: get-version-1
      run: |
        # Retrieve the latest tag for the 1 image from ECR
        V_CURRENT_TAG=$(aws ecr describe-images --repository-name mihirv21-1-image-repo --query 'imageDetails[-1].imageTags[0]' --output text || echo "1.0")
        
        # Extract the numeric part of the version and increment it
        V_MAJOR=$(echo $V_CURRENT_TAG | cut -d. -f1)
        V_MINOR=$(echo $V_CURRENT_TAG | cut -d. -f2)


        # Increment the minor version
        V_MINOR=$((V_MINOR + 1))

        # Construct the new version for the V image
        V_VERSION="$V_MAJOR.$V_MINOR"

        # Set the new version as an environment variable for subsequent steps
        echo "V_VERSION=$V_VERSION" >> $GITHUB_ENV

        # Output the new version for visibility
        echo "New version for 1 image is $V_VERSION"

    - name: Get current version tag for S image
      id: get-version-2
      run: |
        # Retrieve the latest tag for the S image from ECR
        S_CURRENT_TAG=$(aws ecr describe-images --repository-name mihirv21-2-image-repo --query 'imageDetails[-1].imageTags[0]' --output text || echo "2.0")

        # Extract the major and minor parts of the version
        S_MAJOR=$(echo $S_CURRENT_TAG | cut -d. -f1)
        S_MINOR=$(echo $S_CURRENT_TAG | cut -d. -f2)

        # Increment the minor version
        S_MINOR=$((S_MINOR + 1))

        # Construct the new version for the S image
        S_VERSION="$S_MAJOR.$S_MINOR"

        # Set the new version as an environment variable for subsequent steps
        echo "S_VERSION=$S_VERSION" >> $GITHUB_ENV


        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get current version tag for 1 image
      id: get-version-1
      run: |
        # Retrieve the latest tag for the 1 image from ECR
        V_CURRENT_TAG=$(aws ecr describe-images --repository-name mihirv21-1-image-repo --query 'imageDetails[-1].imageTags[0]' --output text || echo "1.0")
        
        # Extract the major and minor parts of the version
        V_MAJOR=$(echo $V_CURRENT_TAG | cut -d. -f1)
       
        # Increment the minor version
        V_MINOR=$((V_MINOR + 1))

        # Construct the new version for the V image
        

        # Set the new version as an environment variable for subsequent steps
        echo "V_VERSION=$V_VERSION" >> $GITHUB_ENV

        # Output the new version for visibility
        echo "New version for 1 image is $V_VERSION"

    - name: Get current version tag for S image
      id: get-version-2
      run: |
        # Retrieve the latest tag for the S image from ECR
        S_CURRENT_TAG=$(aws ecr describe-images --repository-name mihirv21-2-image-repo --query 'imageDetails[-1].imageTags[0]' --output text || echo "2.0")

        # Extract the major and minor parts of the version
        S_MAJOR=$(echo $S_CURRENT_TAG | cut -d. -f1)
      

        # Increment the minor version
        S_MINOR=$((S_MINOR + 1))

        # Construct the new version for the S image
      

        # Set the new version as an environment variable for subsequent steps
        echo "S_VERSION=$S_VERSION" >> $GITHUB_ENV

        # Output the new version for visibility
        echo "New version for S image is $S_VERSION"

    - name: Build Docker images
      run: |
        docker compose build

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 975050059495.dkr.ecr.us-east-1.amazonaws.com

    - name: Tag and push Docker images to ECR
      run: |
        docker tag client:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:1${{ env.V_VERSION }}
        docker tag server:latest 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:2${{ env.S_VERSION }}
        docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:1${{ env.V_VERSION }}
        docker push 975050059495.dkr.ecr.us-east-1.amazonaws.com/mihirv21:2${{ env.S_VERSION }}

    - name: Update ECS Client Service
      run: |
        aws ecs update-service \
          --cluster Cluster \
          --service Front \
          --force-new-deployment \
          --region us-east-1

    - name: Update ECS Server Service
      run: |
        aws ecs update-service \
          --cluster Cluster \
          --service Node \
          --force-new-deployment \
          --region us-east-1
